{"$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","version":"2.1.0","runs":[{"tool":{"driver":{"name":"Checkmarx - SAST","organization":"Checkmarx - SAST","semanticVersion":"1.0.0","rules":[{"id":"SQL_Injection","name":"SQL_Injection","shortDescription":{"text":"SQL_Injection"},"fullDescription":{"text":"SQL_Injection"},"help":{"text":"Fix not available.","markdown":"[SQL_Injection Details]()"},"properties":{"tags":["security","external/cwe/cwe-89"],"precision":""}},{"id":"Second_Order_SQL_Injection","name":"Second_Order_SQL_Injection","shortDescription":{"text":"Second_Order_SQL_Injection"},"fullDescription":{"text":"Second_Order_SQL_Injection"},"help":{"text":"Fix not available.","markdown":"[Second_Order_SQL_Injection Details]()"},"properties":{"tags":["security","external/cwe/cwe-89"],"precision":""}}]}},"results":[{"ruleId":"Second_Order_SQL_Injection","level":"error","message":{"text":"Through a quirk in the applicationâ€™s data flow, an attacker can bypass the input validation mechanism, by first adding the malicious data to the database. The application then creates a standard SQL Injection attack, based on the data already stored in the database. This can enable the attacker to indirectly modify the commands sent to the database, in order to read, change or delete sensitive data."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"/root/login.jsp"},"region":{"startLine":15,"endLine":15}}}]},{"ruleId":"SQL_Injection","level":"error","message":{"text":"An attacker can exploit missing input validation to modify the commands sent to the database. This will allow the attacker to read, change or delete sensitive data."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"/root/login.jsp"},"region":{"startLine":35,"endLine":35}}},{"physicalLocation":{"artifactLocation":{"uri":"/root/login.jsp"},"region":{"startLine":40,"endLine":40}}}]},{"ruleId":"SQL_Injection","level":"error","message":{"text":"An attacker can exploit missing input validation to modify the commands sent to the database. This will allow the attacker to read, change or delete sensitive data."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"/root/password.jsp"},"region":{"startLine":10,"endLine":10}}}]},{"ruleId":"SQL_Injection","level":"error","message":{"text":"An attacker can exploit missing input validation to modify the commands sent to the database. This will allow the attacker to read, change or delete sensitive data."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"/root/register.jsp"},"region":{"startLine":51,"endLine":51}}},{"physicalLocation":{"artifactLocation":{"uri":"/root/register.jsp"},"region":{"startLine":7,"endLine":7}}},{"physicalLocation":{"artifactLocation":{"uri":"/root/register.jsp"},"region":{"startLine":46,"endLine":46}}}]}]},{"tool":{"driver":{"name":"Checkmarx - SCA","organization":"Checkmarx - SCA","semanticVersion":"1.0.0","rules":[{"id":"Maven-org.apache.ant:ant-1.8.4","shortDescription":{"text":"Maven-org.apache.ant:ant-1.8.4"},"fullDescription":{"text":"Maven-org.apache.ant:ant-1.8.4"},"help":{"text":"| CVE Name | Description | Score | References |\r| --- | --- | --- | --- |\r| CVE-2020-1945 | Apache Ant <1.9.15 and 1.10.0 to 1.10.7 uses the default temporary directory identified by the Java system property java.io.tmpdir for several tasks and may thus leak sensitive information. The fixcrlf and replaceregexp tasks also copy files from the temporary directory back into the build tree allowing an attacker to inject modified source files into the build process. | 6.3 | [] |\r| CVE-2020-11979 | As mitigation for CVE-2020-1945 Apache Ant up to 1.10.8 changed the permissions of temporary files it created so that only the current user was allowed to access them. Unfortunately the fixcrlf task deleted the temporary file and created a new one without said protection, effectively nullifying the effort. This would still allow an attacker to inject modified source files into the build process. | 7.5 | [] |\r","markdown":"| CVE Name | Description | Score | References |\r| --- | --- | --- | --- |\r| CVE-2020-1945 | Apache Ant <1.9.15 and 1.10.0 to 1.10.7 uses the default temporary directory identified by the Java system property java.io.tmpdir for several tasks and may thus leak sensitive information. The fixcrlf and replaceregexp tasks also copy files from the temporary directory back into the build tree allowing an attacker to inject modified source files into the build process. | 6.3 |  |\r| CVE-2020-11979 | As mitigation for CVE-2020-1945 Apache Ant up to 1.10.8 changed the permissions of temporary files it created so that only the current user was allowed to access them. Unfortunately the fixcrlf task deleted the temporary file and created a new one without said protection, effectively nullifying the effort. This would still allow an attacker to inject modified source files into the build process. | 7.5 |  |\r"},"properties":{"tags":["CVSS-6.3","CVSS-7.5","security"],"precision":""}}]}},"results":[{"ruleId":"Maven-org.apache.ant:ant-1.8.4","level":"error","message":{"text":"Maven-org.apache.ant:ant-1.8.4"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":""}}}]}]}]}